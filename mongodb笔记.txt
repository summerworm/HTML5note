

MongoDB 手册
http://cn.docs.mongodb.org/manual/contents/
http://cn.docs.mongodb.org/manual/




Mongodb数据导出工具mongoexport和导入工具mongoimport介绍
http://chenzhou123520.iteye.com/blog/1641319

MongoDB数据库中数据从csv和json中的数据导入
http://www.itokit.com/2012/0427/73660.html


导入和导出 MongoDB 数据
http://cn.docs.mongodb.org/manual/administration/import-export/

MongoDB资料汇总专题
http://blog.nosqlfan.com/html/3548.html


MongoDB 入门教程
http://blog.nosqlfan.com/html/342.html

MongoDB系列教程
http://blog.nosqlfan.com/html/348.html

一个简洁的MongoDB教学网站
http://blog.nosqlfan.com/html/1956.html

MongoDB中文介绍PPT
http://blog.nosqlfan.com/html/452.html

简单的MongoDB
http://blog.nosqlfan.com/html/219.html


https://twitter.com/mujiang/status/246308650417799168


博客首页 → MongoDB
http://www.iteye.com/blogs/tag/mongodb

深入浅出MongoDB(一)：认识MongoDB
http://itway.iteye.com/blog/1659661

MongoDB系列之二：简单操作
http://michael8335.iteye.com/blog/1675605

mongodb与mysql对比
http://lhkzyz.iteye.com/blog/1671541

MongoDB性能测试——写入篇
http://www.taobaodba.com/html/tag/mongodb

MongoDB与内存
http://huoding.com/2011/08/19/107

mongodb小结
http://www.wentrue.net/blog/?p=772

MongoDB
http://www.douban.com/group/mongodb/


MongoDB 全文搜索教程
http://www.oschina.net/translate/mongodb-text-search-tutorial












博客的关系数据包含了四种关系
所以已经可以表达所有的关系了

1-1 1-n n-m

1-1包含两种关系
hasOne和belongsTo



MONGODB 管理与开发精要




文档可以由独立的基本类型属性、内嵌文档或文档数组组成。

“_id”的值由 4字节的时间戳,3 字节的机器号,2 字节的进程 id 以及 3 字节的自增计数组成。
当然字段“_id”的值可以手动生成(任意类型都可)，只要能够保证惟一性。 

每个插入的 BSON 对象大小不能超过 4MB，如果超过 4M 时需使用  GridFS 来储存数据。







·


db.user.save({name:"rod",age:30})

db.user.find()
[ 
  {   "name" : "rod",   "_id" : {   "$oid" : "511f9ceacc93742c1601cd4a"   },   "age" : 30   }
]

在mongodb里可以将cursor当成数组来使用，如下所示： 
 
 var cursor = db.user.find(); // 将游标缓存起来
	   printjson(cursor[4]); // 打印出第5条记录







·工具




六、RockMongo
    RockMongo 是一个PHP5写的MongoDB管理工具。支持中文，这一点很对国人胃口，呵呵。运行速度快，安装也简单，还可以查看 GridFS 分块。
    下载地址：http://code.google.com/p/rock-php/downloads/list
    如图所示：
 参考资料
http://blog.sina.com.cn/s/blog_927f3c2401011937.html

Dex是MongoDB索引优化工具

MongoVUE
http://www.mongovue.com/

mongo3是基于MongoDB 集群管理工具
下载地址：
http://www.mongo3.com/

Best PHP MongoDB Administrator
http://rockmongo.com/








·待读文章


8篇MongoDB教程快速学会入门 第1篇 基础入门
http://www.eduyo.com/database/nosql/805.html


 ***
企业中的NoSQL
http://www.infoq.com/cn/articles/nosql-in-the-enterprise

Dex – MongoDB索引优化工具
http://blog.nosqlfan.com/html/4061.html

MongoDB下查询数组的尝试记录
http://codingstandards.iteye.com/blog/1214112

mongoDB数组操作器 
http://lrf8933.blog.163.com/blog/static/68973963201252842758355/

使用mongodb中数组元素的下标来做更新(update)多维数组
http://www.cnblogs.com/xinghebuluo/archive/2011/11/22/2266205.html

MongoDB数组修改器更新数据
http://jzfjeff.blog.51cto.com/1478834/1003191

MongoDB多表关联查询
http://www.eduyo.com/database/nosql/780.html

MongoDB操作类
http://outofmemory.cn/code-snippet/420/MongoDB-operation-class




·读过的文章

NoSQL开篇——为什么要使用NoSQL
http://www.infoq.com/cn/news/2011/01/nosql-why

MongoDB、CouchDB、MySQL之间的差异
http://www.csdn.net/article/2012-06-04/2806321

读了一半，读到“利用java操作MongoDB”，如非必要，不需要看了
http://www.360doc.com/content/11/0711/02/1542811_132808837.shtml

Nosql数据库教程之初探MongoDB - 第一部分
http://www.gbin1.com/technology/javautilities/20120116gettingstartedwithmongodbpart1/









·学习笔记


据说，MongoDB中对象的最大尺寸被限制为4MB。这样看来可以存储很大量的文字呀。
1.8之后限制是16MB。

在32位系统上，最大是单个数据库2GB，如果需要更大的单个数据库容量，就要用64位系统。
另外，如果需要储存更大的文件（二进制，如图片，word文本，等），可以用GridFS而不是MongoDB：









mongodb查询数组中包含某个值,$in,$all,Value in an Array
当数据库里存的单个值，想查询这个值是否是条件数组中的一个值，我们用的是$in
但是如果数据库中存的是一个数组，想查询这个数组里是否包含某个值，以前我一直用$all
现在这样子就可以了。
$whe['ck'] = 'a';
这里ck是一个数组




《MongoDB权威指南》

















·安装

mongodb 安装 XP 环境

cmd
启动mongodb
D:\mongodb\bin\mongod.exe --bind_ip 127.0.0.1 --dbpath D:\mongodb\data --port 27017 --directoryperdb --logpath D:\mongodb\logs\db.txt --logappend

上面的cmd不要关，新开个cmd
进入mongodb
D:\mongodb\bin\mongo.exe

为了避免每次都启动mongo，可以将mongo加入windows服务
D:\mongodb\bin\mongod.exe --bind_ip 127.0.0.1 --dbpath D:\mongodb\data --port 27017 --directoryperdb --logpath D:\mongodb\logs\db.txt --logappend --install

与之相对的是--remove

启动MongoDB：net start MongoDB
停止MongoDB：net stop MongoDB


mongodb的管理工具RockMongo

mongodb 在线试验
http://try.mongodb.org/




·命令






* 命令



-------------------------------------------
MongoDB基本使用

db.foo.find()：对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据） 
db.foo.find( { a : 1 } )：对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1


4、删除当前使用数据库
 db.dropDatabase();

5、从指定主机上克隆数据库
 db.cloneDatabase(“127.0.0.1”); 将指定机器上的数据库的数据克隆到当前数据库

6、从指定的机器上复制指定数据库数据到某个数据库
 db.copyDatabase("mydb", "temp", "127.0.0.1");将本机的mydb的数据复制到temp数据库中

7、修复当前数据库

 db.repairDatabase();


10、当前db版本

 db.version();

11、查看当前db的链接机器地址

 db.getMongo();

Collection聚集集合


2、得到指定名称的聚集集合（table）

 db.getCollection("account");

3、得到当前db的所有聚集集合

 db.getCollectionNames();

4、显示当前db所有聚集索引的状态

 db.printCollectionStats();

 用户相关

1、添加一个用户

 db.addUser("name");

 db.addUser("userName", "pwd123", true); 添加用户、设置密码、是否只读

2、数据库认证、安全模式

 db.auth("userName", "123123");

3、显示当前所有用户

 show users;

4、删除用户

 db.removeUser("userName");

其他
1、查询之前的错误信息
 db.getPrevError();
2、清除错误记录
 db.resetError();
 
查看聚集集合基本信息
 1、查看帮助  db.yourColl.help();
2、查询当前集合的数据条数  db.yourColl.count();
3、查看数据空间大小 db.userInfo.dataSize();
4、得到当前聚集集合所在的db db.userInfo.getDB();
5、得到当前聚集的状态 db.userInfo.stats();
6、得到聚集集合总大小 db.userInfo.totalSize();
7、聚集集合储存空间大小 db.userInfo.storageSize();
8、Shard版本信息  db.userInfo.getShardVersion()
9、聚集集合重命名 db.userInfo.renameCollection("users"); 将userInfo重命名为users
10、删除当前聚集集合 db.userInfo.drop();
聚集集合查询

1、查询所有记录
db.userInfo.find();
相当于：select* from userInfo;
默认每页显示20条记录，当显示不下的情况下，可以用it迭代命令查询下一页数据。注意：键入it命令不能带“；”
但是你可以设置每页显示数据的大小，用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。
 
2、查询去掉后的当前聚集集合中的某列的重复数据
db.userInfo.distinct("name");
会过滤掉name中的相同数据
相当于：select distict name from userInfo;
 
3、查询age = 22的记录
db.userInfo.find({"age": 22});
相当于： select * from userInfo where age = 22;
 
4、查询age > 22的记录
db.userInfo.find({age: {$gt: 22}});
相当于：select * from userInfo where age >22;
 
5、查询age < 22的记录
db.userInfo.find({age: {$lt: 22}});
相当于：select * from userInfo where age <22;
 
6、查询age >= 25的记录
db.userInfo.find({age: {$gte: 25}});
相当于：select * from userInfo where age >= 25;
 
7、查询age <= 25的记录
db.userInfo.find({age: {$lte: 25}});
 
8、查询age >= 23 并且 age <= 26
db.userInfo.find({age: {$gte: 23, $lte: 26}});
 
9、查询name中包含 mongo的数据
db.userInfo.find({name: /mongo/});
//相当于%%
select * from userInfo where name like ‘%mongo%’;
 
10、查询name中以mongo开头的
db.userInfo.find({name: /^mongo/});
select * from userInfo where name like ‘mongo%’;
 
11、查询指定列name、age数据
db.userInfo.find({}, {name: 1, age: 1});
相当于：select name, age from userInfo;
当然name也可以用true或false,当用ture的情况下河name:1效果一样，如果用false就是排除name，显示name以外的列信息。
 
12、查询指定列name、age数据, age > 25
db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1});
相当于：select name, age from userInfo where age >25;
 
13、按照年龄排序
升序：db.userInfo.find().sort({age: 1});
降序：db.userInfo.find().sort({age: -1});
 
14、查询name = zhangsan, age = 22的数据
db.userInfo.find({name: 'zhangsan', age: 22});
相当于：select * from userInfo where name = ‘zhangsan’ and age = ‘22’;
 
15、查询前5条数据
db.userInfo.find().limit(5);
相当于：selecttop 5 * from userInfo;
 
16、查询10条以后的数据
db.userInfo.find().skip(10);
相当于：select * from userInfo where id not in (
selecttop 10 * from userInfo
);
 
17、查询在5-10之间的数据
db.userInfo.find().limit(10).skip(5);
可用于分页，limit是pageSize，skip是第几页*pageSize
 
18、or与 查询
db.userInfo.find({$or: [{age: 22}, {age: 25}]});
相当于：select * from userInfo where age = 22 or age = 25;
 
19、查询第一条数据
db.userInfo.findOne();
相当于：selecttop 1 * from userInfo;
db.userInfo.find().limit(1);
 
20、查询某个结果集的记录条数
db.userInfo.find({age: {$gte: 25}}).count();
相当于：select count(*) from userInfo where age >= 20;
 
21、按照某列进行排序
db.userInfo.find({sex: {$exists: true}}).count();
相当于：select count(sex) from userInfo;
索引
1、创建索引
db.userInfo.ensureIndex({name: 1});
db.userInfo.ensureIndex({name: 1, ts: -1});
 
2、查询当前聚集集合所有索引
db.userInfo.getIndexes();
 
3、查看总索引记录大小
db.userInfo.totalIndexSize();
 
4、读取当前集合的所有index信息
db.users.reIndex();
 
5、删除指定索引
db.users.dropIndex("name_1");
 
6、删除所有索引索引
db.users.dropIndexes();
 修改、添加、删除集合数据

1、添加
db.users.save({name: ‘zhangsan’, age: 25, sex: true});
添加的数据的数据列，没有固定，根据添加的数据为准
 
2、修改
db.users.update({age: 25}, {$set: {name: 'changeName'}}, false, true);
相当于：update users set name = ‘changeName’ where age = 25;
 
db.users.update({name: 'Lisi'}, {$inc: {age: 50}}, false, true);
相当于：update users set age = age + 50 where name = ‘Lisi’;
 
db.users.update({name: 'Lisi'}, {$inc: {age: 50}, $set: {name: 'hoho'}}, false, true);
相当于：update users set age = age + 50, name = ‘hoho’ where name = ‘Lisi’;
 
3、删除
db.users.remove({age: 132});
 
4、查询修改删除
db.users.findAndModify({
    query: {age: {$gte: 25}}, 
    sort: {age: -1}, 
    update: {$set: {name: 'a2'}, $inc: {age: 2}},
    remove: true
});
 
db.runCommand({ findandmodify : "users", 
    query: {age: {$gte: 25}}, 
    sort: {age: -1}, 
    update: {$set: {name: 'a2'}, $inc: {age: 2}},
    remove: true
});
update 或 remove 其中一个是必须的参数; 其他参数可选。

参数

详解 

默认值 

query

查询过滤条件

{} 

sort

如果多个文档符合查询过滤条件，将以该参数指定的排列方式选择出排在首位的对象，该对象将被操作

{} 

remove

若为true，被选中对象将在返回前被删除

N/A 

update

一个 修改器对象

N/A 

new

若为true，将返回修改后的对象而不是原始对象。在删除操作中，该参数被忽略。

false 

fields

参见Retrieving a Subset of Fields (1.5.0+) 

All fields 

upsert

创建新对象若查询结果为空。 示例 (1.5.4+) 

false 

语句块操作
1、简单Hello World
print("Hello World!");
这种写法调用了print函数，和直接写入"Hello World!"的效果是一样的；
 
2、将一个对象转换成json
tojson(new Object());
tojson(new Object('a'));
 
3、循环添加数据
> for (var i = 0; i < 30; i++) {
... db.users.save({name: "u_" + i, age: 22 + i, sex: i % 2});
... };
这样就循环添加了30条数据，同样也可以省略括号的写法
> for (var i = 0; i < 30; i++) db.users.save({name: "u_" + i, age: 22 + i, sex: i % 2});
也是可以的，当你用db.users.find()查询的时候，显示多条数据而无法一页显示的情况下，可以用it查看下一页的信息；
 
4、find 游标查询
>var cursor = db.users.find();
> while (cursor.hasNext()) { 
    printjson(cursor.next()); 
}
这样就查询所有的users信息，同样可以这样写
var cursor = db.users.find();
while (cursor.hasNext()) { printjson(cursor.next); }
同样可以省略{}号
 
5、forEach迭代循环
db.users.find().forEach(printjson);
forEach中必须传递一个函数来处理每条迭代的数据信息
 
6、将find游标当数组处理
var cursor = db.users.find();
cursor[4];
取得下标索引为4的那条数据
既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count();
那样我们也可以用循环显示数据
for (var i = 0, len = c.length(); i < len; i++) printjson(c[i]);
 
7、将find游标转换成数组
> var arr = db.users.find().toArray();
> printjson(arr[2]);
用toArray方法将其转换为数组
 
8、定制我们自己的查询结果
只显示age <= 28的并且只显示age这列数据
db.users.find({age: {$lte: 28}}, {age: 1}).forEach(printjson);
db.users.find({age: {$lte: 28}}, {age: true}).forEach(printjson);
排除age的列
db.users.find({age: {$lte: 28}}, {age: false}).forEach(printjson);
 
9、forEach传递函数显示信息
db.things.find({x:4}).forEach(function(x) {print(tojson(x));});




------------------------------------------- 完整备份
MongoDB基本使用

成功启动MongoDB后，再打开一个命令行窗口输入mongo，就可以进行数据库的一些操作。

输入help可以看到基本操作命令：
show dbs:显示数据库列表 
show collections：显示当前数据库中的集合（类似关系数据库中的表） 
show users：显示用户

use <db name>：切换当前数据库，这和MS-SQL里面的意思一样 
db.help()：显示数据库操作命令，里面有很多的命令 
db.foo.help()：显示集合操作命令，同样有很多的命令，foo指的是当前数据库下，一个叫foo的集合，并非真正意义上的命令 
db.foo.find()：对于当前数据库中的foo集合进行数据查找（由于没有条件，会列出所有数据） 
db.foo.find( { a : 1 } )：对于当前数据库中的foo集合进行查找，条件是数据中有一个属性叫a，且a的值为1

MongoDB没有创建数据库的命令，但有类似的命令。

如：如果你想创建一个“myTest”的数据库，先运行use myTest命令，之后就做一些操作（如：db.createCollection('user')）,这样就可以创建一个名叫“myTest”的数据库。

数据库常用命令

1、Help查看命令提示

 help

  db.help();

  db.yourColl.help();

  db.youColl.find().help();

  rs.help();

2、切换/创建数据库

 use yourDB;  当创建一个集合(table)的时候会自动创建当前数据库

3、查询所有数据库

 show dbs;

4、删除当前使用数据库

 db.dropDatabase();

5、从指定主机上克隆数据库

 db.cloneDatabase(“127.0.0.1”); 将指定机器上的数据库的数据克隆到当前数据库

6、从指定的机器上复制指定数据库数据到某个数据库

 db.copyDatabase("mydb", "temp", "127.0.0.1");将本机的mydb的数据复制到temp数据库中

7、修复当前数据库

 db.repairDatabase();

8、查看当前使用的数据库

 db.getName();

 db; db和getName方法是一样的效果，都可以查询当前使用的数据库

9、显示当前db状态

 db.stats();

10、当前db版本

 db.version();

11、查看当前db的链接机器地址

 db.getMongo();

Collection聚集集合

1、创建一个聚集集合（table）

 db.createCollection(“collName”, {size: 20, capped: 5, max: 100});

2、得到指定名称的聚集集合（table）

 db.getCollection("account");

3、得到当前db的所有聚集集合

 db.getCollectionNames();

4、显示当前db所有聚集索引的状态

 db.printCollectionStats();

 用户相关

1、添加一个用户

 db.addUser("name");

 db.addUser("userName", "pwd123", true); 添加用户、设置密码、是否只读

2、数据库认证、安全模式

 db.auth("userName", "123123");

3、显示当前所有用户

 show users;

4、删除用户

 db.removeUser("userName");

其他
1、查询之前的错误信息
 db.getPrevError();
2、清除错误记录
 db.resetError();
 
查看聚集集合基本信息
 1、查看帮助  db.yourColl.help();
2、查询当前集合的数据条数  db.yourColl.count();
3、查看数据空间大小 db.userInfo.dataSize();
4、得到当前聚集集合所在的db db.userInfo.getDB();
5、得到当前聚集的状态 db.userInfo.stats();
6、得到聚集集合总大小 db.userInfo.totalSize();
7、聚集集合储存空间大小 db.userInfo.storageSize();
8、Shard版本信息  db.userInfo.getShardVersion()
9、聚集集合重命名 db.userInfo.renameCollection("users"); 将userInfo重命名为users
10、删除当前聚集集合 db.userInfo.drop();
聚集集合查询

1、查询所有记录
db.userInfo.find();
相当于：select* from userInfo;
默认每页显示20条记录，当显示不下的情况下，可以用it迭代命令查询下一页数据。注意：键入it命令不能带“；”
但是你可以设置每页显示数据的大小，用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。
 
2、查询去掉后的当前聚集集合中的某列的重复数据
db.userInfo.distinct("name");
会过滤掉name中的相同数据
相当于：select distict name from userInfo;
 
3、查询age = 22的记录
db.userInfo.find({"age": 22});
相当于： select * from userInfo where age = 22;
 
4、查询age > 22的记录
db.userInfo.find({age: {$gt: 22}});
相当于：select * from userInfo where age >22;
 
5、查询age < 22的记录
db.userInfo.find({age: {$lt: 22}});
相当于：select * from userInfo where age <22;
 
6、查询age >= 25的记录
db.userInfo.find({age: {$gte: 25}});
相当于：select * from userInfo where age >= 25;
 
7、查询age <= 25的记录
db.userInfo.find({age: {$lte: 25}});
 
8、查询age >= 23 并且 age <= 26
db.userInfo.find({age: {$gte: 23, $lte: 26}});
 
9、查询name中包含 mongo的数据
db.userInfo.find({name: /mongo/});
//相当于%%
select * from userInfo where name like ‘%mongo%’;
 
10、查询name中以mongo开头的
db.userInfo.find({name: /^mongo/});
select * from userInfo where name like ‘mongo%’;
 
11、查询指定列name、age数据
db.userInfo.find({}, {name: 1, age: 1});
相当于：select name, age from userInfo;
当然name也可以用true或false,当用ture的情况下河name:1效果一样，如果用false就是排除name，显示name以外的列信息。
 
12、查询指定列name、age数据, age > 25
db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1});
相当于：select name, age from userInfo where age >25;
 
13、按照年龄排序
升序：db.userInfo.find().sort({age: 1});
降序：db.userInfo.find().sort({age: -1});
 
14、查询name = zhangsan, age = 22的数据
db.userInfo.find({name: 'zhangsan', age: 22});
相当于：select * from userInfo where name = ‘zhangsan’ and age = ‘22’;
 
15、查询前5条数据
db.userInfo.find().limit(5);
相当于：selecttop 5 * from userInfo;
 
16、查询10条以后的数据
db.userInfo.find().skip(10);
相当于：select * from userInfo where id not in (
selecttop 10 * from userInfo
);
 
17、查询在5-10之间的数据
db.userInfo.find().limit(10).skip(5);
可用于分页，limit是pageSize，skip是第几页*pageSize
 
18、or与 查询
db.userInfo.find({$or: [{age: 22}, {age: 25}]});
相当于：select * from userInfo where age = 22 or age = 25;
 
19、查询第一条数据
db.userInfo.findOne();
相当于：selecttop 1 * from userInfo;
db.userInfo.find().limit(1);
 
20、查询某个结果集的记录条数
db.userInfo.find({age: {$gte: 25}}).count();
相当于：select count(*) from userInfo where age >= 20;
 
21、按照某列进行排序
db.userInfo.find({sex: {$exists: true}}).count();
相当于：select count(sex) from userInfo;
索引
1、创建索引
db.userInfo.ensureIndex({name: 1});
db.userInfo.ensureIndex({name: 1, ts: -1});
 
2、查询当前聚集集合所有索引
db.userInfo.getIndexes();
 
3、查看总索引记录大小
db.userInfo.totalIndexSize();
 
4、读取当前集合的所有index信息
db.users.reIndex();
 
5、删除指定索引
db.users.dropIndex("name_1");
 
6、删除所有索引索引
db.users.dropIndexes();
 修改、添加、删除集合数据

1、添加
db.users.save({name: ‘zhangsan’, age: 25, sex: true});
添加的数据的数据列，没有固定，根据添加的数据为准
 
2、修改
db.users.update({age: 25}, {$set: {name: 'changeName'}}, false, true);
相当于：update users set name = ‘changeName’ where age = 25;
 
db.users.update({name: 'Lisi'}, {$inc: {age: 50}}, false, true);
相当于：update users set age = age + 50 where name = ‘Lisi’;
 
db.users.update({name: 'Lisi'}, {$inc: {age: 50}, $set: {name: 'hoho'}}, false, true);
相当于：update users set age = age + 50, name = ‘hoho’ where name = ‘Lisi’;
 
3、删除
db.users.remove({age: 132});
 
4、查询修改删除
db.users.findAndModify({
    query: {age: {$gte: 25}}, 
    sort: {age: -1}, 
    update: {$set: {name: 'a2'}, $inc: {age: 2}},
    remove: true
});
 
db.runCommand({ findandmodify : "users", 
    query: {age: {$gte: 25}}, 
    sort: {age: -1}, 
    update: {$set: {name: 'a2'}, $inc: {age: 2}},
    remove: true
});
update 或 remove 其中一个是必须的参数; 其他参数可选。

参数

详解 

默认值 

query

查询过滤条件

{} 

sort

如果多个文档符合查询过滤条件，将以该参数指定的排列方式选择出排在首位的对象，该对象将被操作

{} 

remove

若为true，被选中对象将在返回前被删除

N/A 

update

一个 修改器对象

N/A 

new

若为true，将返回修改后的对象而不是原始对象。在删除操作中，该参数被忽略。

false 

fields

参见Retrieving a Subset of Fields (1.5.0+) 

All fields 

upsert

创建新对象若查询结果为空。 示例 (1.5.4+) 

false 

语句块操作
1、简单Hello World
print("Hello World!");
这种写法调用了print函数，和直接写入"Hello World!"的效果是一样的；
 
2、将一个对象转换成json
tojson(new Object());
tojson(new Object('a'));
 
3、循环添加数据
> for (var i = 0; i < 30; i++) {
... db.users.save({name: "u_" + i, age: 22 + i, sex: i % 2});
... };
这样就循环添加了30条数据，同样也可以省略括号的写法
> for (var i = 0; i < 30; i++) db.users.save({name: "u_" + i, age: 22 + i, sex: i % 2});
也是可以的，当你用db.users.find()查询的时候，显示多条数据而无法一页显示的情况下，可以用it查看下一页的信息；
 
4、find 游标查询
>var cursor = db.users.find();
> while (cursor.hasNext()) { 
    printjson(cursor.next()); 
}
这样就查询所有的users信息，同样可以这样写
var cursor = db.users.find();
while (cursor.hasNext()) { printjson(cursor.next); }
同样可以省略{}号
 
5、forEach迭代循环
db.users.find().forEach(printjson);
forEach中必须传递一个函数来处理每条迭代的数据信息
 
6、将find游标当数组处理
var cursor = db.users.find();
cursor[4];
取得下标索引为4的那条数据
既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count();
那样我们也可以用循环显示数据
for (var i = 0, len = c.length(); i < len; i++) printjson(c[i]);
 
7、将find游标转换成数组
> var arr = db.users.find().toArray();
> printjson(arr[2]);
用toArray方法将其转换为数组
 
8、定制我们自己的查询结果
只显示age <= 28的并且只显示age这列数据
db.users.find({age: {$lte: 28}}, {age: 1}).forEach(printjson);
db.users.find({age: {$lte: 28}}, {age: true}).forEach(printjson);
排除age的列
db.users.find({age: {$lte: 28}}, {age: false}).forEach(printjson);
 
9、forEach传递函数显示信息
db.things.find({x:4}).forEach(function(x) {print(tojson(x));});
-------------------------------------------



* 安装

启动MongoDB的选项可以通过命令行或者配置文件设置，两者的语法稍微有点不同，这里有一个三种选项的设置例子:
命令行	 配置文件
--dbpath /path/to/db	 dbpath=/path/to/db
--auth	 auth=true
-vvv	 vvv=true
在mongod下运行--help可以列出所有的操作选项，但是这里我们列出了一些最常用的:
操作选项	 描述
--config /path/to/config	 指定其他配置选项的配置文件.
--dbpath /path/to/data	 数据存储目录.
--port 27017	 监听端口号.
--logpath /path/to/file.log	 日志输出文件，这是个明确的文件路径，不是目录.
--logappend	 重启后，以追加的方式创建日志防止把之前的日志删除了。在使用--logpath时总是开启.
--fork	 把mongod配置为守护进程.
--auth	 单个服务器的安全验证.
--keyFile /path/to/key.txt	 副本集和分片时安全验证，需要使用一个路径共享密钥。
--nohttpinterface	 关闭http访问接口
--bind_ip address	 只允许指定的网络ip访问.
如果想安全的启动mongod，就要使用nohttpinterface和bind_ip操作选项，确定外网不能直接访问。尤其确保你没有其余的选项启动，MongoDB需要以下网络环境可以访问:
单个服务器 - 客户端程序可以获取访问连接
副本集 - 任何成员集能够访问，包括自己；客户端能够访问任何一个成员集，并且可访问的成员集都能够成为主节点（活跃节点）.
分片- mongos进程必须能够连接到配置的服务器和分片，分片必须能够彼此连接。客户端程序必须能够连接到mongos进程。配置服务器没必要彼此提供访问连接的支持。
所有的连接都是通过tcp建立的.
http://www.oschina.net/translate/mongodb-flexible-nosql-for-humongous-data








·简介




规模大 并发高 业务逻辑简单 高扩展

分片技术

MongoDB以文档的形式存储数据，不支持事务和表连接。因此查询的编写、理解和优化都容易得多。简单查询设计思路不同于SQL模式，嵌入文档在特定的环境下可得到更好的查询，然而这需要先加入集合。如果需要执行多个请求到数据库则需要加入其到客户端。在MongoDB时ODM工具（如Doctrine2）将发挥自身的优势。

在MongoDB上使用Doctrine2 ODMs 查询语言可减轻攻击风险。

1、更好的性能。MongoDB本身并没有更好的性能，但通过使用sharding以及大的in-memory存储(in-memory stores)，可以使其性能更好。

2、更好更容易的可扩展性设置。该特性也不是其本身自带的，并且也不是没有瑕疵的。但是MongoDB中内置的sharding效果很不错，很大程度上对应用程序来说是透明的。







-------------------------------

MongoDB是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，是类似json的bjson格式，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。

它的特点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：

面向集合存储，易存储对象类型的数据。
模式自由。
支持动态查询。
支持完全索引，包含内部对象。
支持查询。
支持复制和故障恢复。
使用高效的二进制数据存储，包括大型对象（如视频等）。
自动处理碎片，以支持云计算层次的扩展性
支持RUBY，PYTHON，JAVA，C++，PHP等多种语言。
文件存储格式为BSON（一种JSON的扩展）
可通过网络访问

所谓“面向集合”（Collenction-Orented），意思是数据被分组存储在数据集中，被称为一个集合（Collenction)。每个 集合在数据库中都有一个唯一的标识名，并且可以包含无限数目的文档。集合的概念类似关系型数据库（RDBMS）里的表（table），不同的是它不需要定 义任何模式（schema)。
模式自由（schema-free)，意味着对于存储在mongodb数据库中的文件，我们不需要知道它的任何结构定义。如果需要的话，你完全可以把不同结构的文件存储在同一个数据库里。
存储在集合中的文档，被存储为键-值对的形式。键用于唯一标识一个文档，为字符串类型，而值则可以是各中复杂的文件类型。我们称这种存储形式为BSON（Binary Serialized dOcument Format）。


默认端口为27017

在32位模式运行时支持的最大文件尺寸为2GB。

MongoDB把数据存储在文件中（默认路径为：/data/db），为提高效率使用内存映射文件进行管理。






















