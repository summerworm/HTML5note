



AngularJS










Go+angularJS
https://github.com/icub3d/home/

http://www.angularjs.cn/
详细的看了看，但不知如何用。


用angular，后端可以用任何语言
随便换完全不用改代码





http://startuplive.in/
这个框架看起来很牛B的样子






·入门教程

http://www.angularjs.cn/docs/tutorial/374.html



使用[模型-视图-控制器（MVC）模式][]解耦代码和分离关注点。


在AngularJS中，一个视图是模型通过HTML模板渲染之后的映射。
这意味着，不论模型什么时候发生变化，AngularJS会实时更新结合点，随之更新视图。


AngularJS的作用域理论非常重要：一个作用域可以视作模板、模型和控制器协同工作的粘接器。AngularJS使用作用域，同时还有模板中的信息，数据模型和控制器。这些可以帮助模型和视图分离，但是他们两者确实是同步的！任何对于模型的更改都会即时反映在视图上；任何在视图上的更改都会被立刻体现在模型中。


在写测试的时候，AngularJS的开发者倾向于使用Jasmine行为驱动开发（BBD）框架中的语法。尽管AngularJS没有强迫你使用Jasmine，但是我们在教程里面所有的测试都使用Jasmine编写。


自动初始化
AngularJS会在DOMContentLoaded事件触发时执行，并通过ng-app指令 寻找你的应用根作用域。如果 ng-app指令找到了，那么AngularJS将会：
载入和 指令 内容相关的模块。
创建一个应用的“注入器(injector)”。
已拥有ng-app 指令 的标签为根节点来编译其中的DOM。这使得你可以只指定DOM中的一部分作为你的AngularJS应用。


扩展的指令就是你创建APP的 “特定领域语言（Domain Specific Language）”。


编译器(complier)
编译器是AngularJS提供的一项服务，它通过遍历DOM来查找和它相关的属性。整个编译的过程分为两个阶段。
编译： 遍历DOM并且收集所有的相关指令，生成一个链接函数。
链接： 给指令绑定一个作用域，生成一个动态的视图。作用域模型的任何改变都会反映到视图上，并且视图上的任何用户操作也都会反映到作用域模型。这使得作用域模型成为你的业务逻辑里唯一要关心的东西。


指令
指令指示的是“当关联的HTML结构进入编译阶段时应该执行的操作”。指令可以写在元素的名称里，属性里，css类名里，注释里。

























·简介




http://angularjs.org/






谷歌称， AngularJS可以让你扩展HTML的语法，以便清晰、简洁地表示应用程序中的组件，并允许将标准的HTML作为你的模板语言。AngularJS可以通过双向数据绑定自动从拥有JavaScript对象（模型）的UI（视图）中同步数据。 

AngularJS的核心功能包括： 
数据绑定：当数据发生变化时，AngularJS会自动从UI中移动数据到模型（model）和后端（back），没有继承类，也没有封装或调用getter/setter方法。模型可以像一个原始数组一样简单，也可以像自定义JavaScript类型一样复杂。
HTML作为模板：AngularJS允许你使用与HTML规范兼容的、你的应用特有的元素、属性、类的类型来扩展HTML语法。
可重用组件： 你想使用<tab>、<calendar>或<colorpicker>来代 替<div></div>吗?你想通过添加“key=’ctrl-s’”属性来为任何元素指定键盘快捷键吗？通过 AngularJS就可以做到。
视图（Views）和路由（Routes）：AngularJS允许你在带有简单路由配置的应用程序中切换子视图，并且你会得到URL深度链接（deep-linking）。
易测性


AngularJS (Angular.JS) 是一组用来开发Web页面的框架、模板以及数据绑定和丰富UI组件。它支持整个开发进程，提供web应用的架构，无需进行手工DOM操作。 AngularJS很小，只有60K，兼容主流浏览器，与 jQuery 配合良好。

使用DOM作为输入，而不是字符串，是AngularJS区别于其它的框架的最大原因。使用DOM允许你扩展指令词汇并且可以创建你自己的指令，甚至开发可重用的组件。


特性四：依赖注入（Dependency Injection，即DI）
AngularJS拥有内建的依赖注入子系统，可以帮助开发人员更容易的开发，理解和测试应用。
DI允许你请求你的依赖，而不是自己找寻它们。比如，我们需要一个东西，DI负责找创建并且提供给我们。

特性五：Directives（指令）
指令是我个人最喜欢的特性。你是不是也希望浏览器可以做点儿有意思的事情？那么AngularJS可以做到。
指令可以用来创建自定义的标签。它们可以用来装饰元素或者操作DOM属性。


目录：建议在根目录中只放置index.html一个文件，然后根据需要创建scripts、styles、views等目录，在scripts目录下，首先会存放app.js文件，然后在之下又可以创建多个子目录，如：controllers、directives、filters、services、vendor等，在其中分门别类地存放不同的内容。并且，随着你为应用创建更多内容，也许会增加更多子目录来存放各种文件。

文件：每个文件中应该只有一件事物，这件事物可能会是控件、指令、过滤器或者服务等等。这会生成比较小但更专注的文件。也有利于更好地进行测试。



在工具方面，首先推荐使用Yeoman，从而获得最佳实践和很好的项目结构，另外还有AngularJS Batarang，它对于调试和找到性能瓶颈会很有效。


在服务器方面，你可以使用任何想要的服务器和AngularJS协作。它只是客户端的程序库。我的推荐和喜欢的设置是使用Node.js加nginx。我使用nginx存放静态文件，使用Node.js创建RESTful的API和嵌入的（socketed）应用。对于云提供商，我曾经成功使用过Nodejitsu 和Linode。前者会让你更容易地部署程序，你不需要关心服务器的环境。如果你需要对服务器环境有更多控制，那么Linode会让你从底层控制虚拟机。Linode还提供了很好的API，可以用来管理虚拟机。


它的创新点在于，利用 数据绑定 和 依赖注入，它使你不用再写大量的代码了。这些全都是通过浏览器端的Javascript实现，这也使得它能够完美地和任何服务器端技术结合。


通常，我们是通过以下技术来解决静态网页技术在构建动态应用上的不足：
类库 - 类库是一些函数的集合，它能帮助你写WEB应用。起主导作用的是你的代码，由你来决定何时使用类库。类库有：jQuery等
框架 - 框架是一种特殊的、已经实现了的WEB应用，你只需要对它填充具体的业务逻辑。这里框架是起主导作用的，由它来根据具体的应用逻辑来调用你的代码。框架有：knockout、sproutcore等。


端对端的解决方案
AngularJS试图成为成为WEB应用中的一种端对端的解决方案。这意味着它不只是你的WEB应用中的一个小部分，而是一个完整的端对端的解决方案。这会让AngularJS在构建一个CRUD（增加Create、查询Retrieve、更新Update、删除Delete）的应用时显得很“固执”（原文为 opinionated,意指没有太多的其他方式）。但是，尽管它很“固执”，它仍然能确保它的“固执”只是在你构建应用的起点，并且你仍能灵活变动。AngularJS的一些出众之处如下：
构建一个CRUD应用可能用到的全部内容包括：数据绑定、基本模板标识符、表单验证、路由、深度链接、组件重用、依赖注入。
测试方面包括：单元测试、端对端测试、模拟和自动化测试框架。
具有目录布局和测试脚本的种子应用作为起点。


AngularJS主要考虑的是构建CRUD应用。





















